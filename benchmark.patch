Binary files postgresql-14.5/src/backend/optimizer/path/allpaths.o and postgresql-14.5-selectivity-injection/src/backend/optimizer/path/allpaths.o differ
diff -ruN postgresql-14.5/src/backend/optimizer/path/clausesel.c postgresql-14.5-selectivity-injection/src/backend/optimizer/path/clausesel.c
--- postgresql-14.5/src/backend/optimizer/path/clausesel.c  2022-08-08 22:44:29.000000000 +0200
+++ postgresql-14.5-selectivity-injection/src/backend/optimizer/path/clausesel.c    2023-10-17 13:06:23.804070603 +0200
@@ -26,6 +26,10 @@
 #include "utils/lsyscache.h"
 #include "utils/selfuncs.h"
 
+
+#include "parser/parsetree.h"
+
+
 /*
  * Data structure for accumulating info about possible range-query
  * clause pairs in clauselist_selectivity.
@@ -51,6 +55,360 @@
                                             SpecialJoinInfo *sjinfo,
                                             bool use_extended_stats);
 
+
+typedef char TYPCATEGORY;
+#define CARD_EST_QUERY_NUM 20000
+static double sel_ests[CARD_EST_QUERY_NUM] = {0.0};
+
+
+static void
+read_from_fspn_estimate(const char* filename)
+{
+    FILE* fp = fopen(filename, "r");
+    double sel_est;
+    int query_cnt = 0;
+
+    while (fscanf(fp, "%lf", &sel_est) == 1){
+        sel_ests[query_cnt] = sel_est;
+        query_cnt += 1;
+    }
+
+    fclose(fp);
+}
+
+
+char** splitArrayString(const char* str, int* size) {
+    *size = 0; // this will store the number of elements found
+
+    // Count the number of commas to estimate the number of substrings
+    for(int i = 0; str[i]; i++) {
+        if(str[i] == ',') (*size)++;
+    }
+    (*size)++; // account for the last element
+
+    // Allocate memory for the array of strings
+    char** result = (char**)malloc((*size) * sizeof(char*));
+
+    int start = 1; // Start after the opening brace
+    int index = 0;
+
+    for(int i = 1; str[i]; i++) {
+        if(str[i] == ',' || str[i] == '}') {
+            int length = i - start;
+
+            // Allocate memory for each substring
+            result[index] = (char*) malloc((length + 1) * sizeof(char));
+            if(!result[index]) {
+                perror("Memory allocation error");
+                exit(1);
+            }
+
+            strncpy(result[index], str + start, length);
+            result[index][length] = '\0'; // Null terminate the substring
+
+            start = i + 1; // Adjust start position for the next substring
+            index++;
+        }
+    }
+
+    return result;
+}
+
+static void
+fprint_const(FILE* fp, const Oid const_type, const TYPCATEGORY type_category, const char *str)
+{
+    if (type_category == TYPCATEGORY_ARRAY) {
+        Oid element_type_oid;
+        TYPCATEGORY element_type_category;
+        bool element_type_is_preferred;
+        int size;
+
+        element_type_oid = get_element_type(const_type);
+        get_type_category_preferred(element_type_oid, &element_type_category, &element_type_is_preferred);
+
+        char **element_strings = splitArrayString(str, &size);
+        fprintf(fp, "(");
+        for (int i = 0; i < size; i++)
+        {
+            if (i > 0)
+            {
+                fprintf(fp, ", ");
+            }
+            fprint_const(fp, element_type_oid, element_type_category, element_strings[i]);
+            free(element_strings[i]);
+        }
+        fprintf(fp, ")");
+        free(element_strings);
+    }
+    else if (type_category == TYPCATEGORY_STRING)
+    {
+        // TODO: Triple escape string contents: once for C, once for JSON, once for SQL
+        ulong str_len = strlen(str);
+        if (str[0] == '"' && str[str_len - 1] == '"')
+        {
+            fprintf(fp,"'");
+            for (int i = 1; i < str_len - 1; i++)
+            {
+                fprintf(fp, "%c", str[i]);
+            }
+            fprintf(fp,"'");
+        }
+        else
+        {
+            fprintf(fp,"'%s'", str);
+        }
+
+    }
+    else if (type_category == TYPCATEGORY_DATETIME)
+    {
+        fprintf(fp,"'%s'", str);
+    }
+    else if (type_category == TYPCATEGORY_BOOLEAN || type_category == TYPCATEGORY_NUMERIC)
+    {
+        fprintf(fp,"%s", str);
+    }
+    else if (type_category == TYPCATEGORY_TIMESPAN)
+    {
+        fprintf(fp,"interval '%s'", str);
+    }
+    else
+    {
+        fprintf(fp,"unknown type category %c: %s", type_category, str);
+    }
+}
+
+static void
+fprint_expr(FILE* fp, const Node *expr, const List *rtable)
+{
+    if (expr == NULL)
+    {
+        fprintf(fp,"<>");
+        return;
+    }
+
+    if (IsA(expr, Var))
+    {
+        const Var  *var = (const Var *) expr;
+        char      *relname,
+                *attname;
+
+        switch (var->varno)
+        {
+            case INNER_VAR:
+                relname = "INNER";
+                attname = "?";
+                break;
+            case OUTER_VAR:
+                relname = "OUTER";
+                attname = "?";
+                break;
+            case INDEX_VAR:
+                relname = "INDEX";
+                attname = "?";
+                break;
+            default:
+            {
+                RangeTblEntry *rte;
+
+                Assert(var->varno > 0 &&
+                       (int) var->varno <= list_length(rtable));
+                rte = rt_fetch(var->varno, rtable);
+                relname = rte->eref->aliasname;
+                attname = get_rte_attribute_name(rte, var->varattno);
+            }
+                break;
+        }
+        fprintf(fp,"%s.%s", relname, attname);
+    }
+    else if (IsA(expr, Const))
+    {
+        const Const *c = (const Const *) expr;
+        Oid            typoutput;
+        bool       typIsVarlena;
+        char      *outputstr;
+        TYPCATEGORY type_category;
+        bool       type_is_preferred;
+
+        if (c->constisnull)
+        {
+            fprintf(fp,"NULL");
+            return;
+        }
+
+        getTypeOutputInfo(c->consttype,
+                          &typoutput, &typIsVarlena);
+
+        outputstr = OidOutputFunctionCall(typoutput, c->constvalue);
+
+        get_type_category_preferred(c->consttype, &type_category, &type_is_preferred);
+        fprint_const(fp, c->consttype, type_category, outputstr);
+
+        pfree(outputstr);
+    }
+    else if (IsA(expr, OpExpr))
+    {
+        const OpExpr *e = (const OpExpr *) expr;
+        char      *opname;
+
+        opname = get_opname(e->opno);
+        if (list_length(e->args) > 1)
+        {
+            fprint_expr(fp, get_leftop((const Expr *) e), rtable);
+            fprintf(fp," %s ", ((opname != NULL) ? opname : "(invalid operator)"));
+            fprint_expr(fp, get_rightop((const Expr *) e), rtable);
+        }
+        else
+        {
+            /* we print prefix and postfix ops the same... */
+            fprintf(fp,"%s ", ((opname != NULL) ? opname : "(invalid operator)"));
+            fprint_expr(fp, get_leftop((const Expr *) e), rtable);
+        }
+    }
+    else if (IsA(expr, FuncExpr))
+    {
+        const FuncExpr *e = (const FuncExpr *) expr;
+        char      *funcname;
+        ListCell   *l;
+
+        funcname = get_func_name(e->funcid);
+        if (strcmp(funcname, "numeric") == 0)
+        {
+            foreach(l, e->args)
+            {
+                fprint_expr(fp, lfirst(l), rtable);
+                if (lnext(e->args, l))
+                    fprintf(fp,",");
+            }
+            fprintf(fp,"::numeric");
+        } else
+        {
+            fprintf(fp,"%s(", ((funcname != NULL) ? funcname : "(invalid function)"));
+            foreach(l, e->args)
+            {
+                fprint_expr(fp, lfirst(l), rtable);
+                if (lnext(e->args, l))
+                    fprintf(fp,",");
+            }
+            fprintf(fp,")");
+        }
+    }
+    else if (IsA(expr, ScalarArrayOpExpr))
+    {
+        const ScalarArrayOpExpr *e = (const ScalarArrayOpExpr *) expr;
+        char      *opname;
+        opname = get_opname(e->opno);
+        fprint_expr(fp, linitial(e->args), rtable);
+        fprintf(fp," %s ", ((opname != NULL) ? opname : "(invalid operator)"));
+        if(e->useOr){
+            fprintf(fp, "ANY ");
+        }
+        else{
+            fprintf(fp, "ALL ");
+        }
+        fprint_expr(fp, lsecond(e->args), rtable);
+    }
+    else if (IsA(expr, BoolExpr))
+    {
+        const BoolExpr *e = (const BoolExpr *) expr;
+        ListCell   *l;
+
+        if (e->boolop == NOT_EXPR)
+        {
+            fprintf(fp, "NOT (");
+            fprint_expr(fp, linitial(e->args), rtable);
+            fprintf(fp, ")");
+        }
+        else
+        {
+            char *op_name;
+            if (e->boolop == AND_EXPR)
+            {
+                op_name = " AND ";
+            }
+            else
+            {
+                op_name = " OR ";
+            }
+            foreach(l, e->args)
+            {
+                fprintf(fp, "(");
+                fprint_expr(fp, lfirst(l), rtable);
+                fprintf(fp, ")");
+                if (lnext(e->args, l))
+                    fprintf(fp, op_name);
+            }
+        }
+    }
+    else if (IsA(expr, RelabelType))
+    {
+        const RelabelType *e = (const RelabelType *) expr;
+        fprint_expr(fp, e->arg, rtable);
+    }
+    else if (IsA(expr, CaseExpr))
+    {
+        ListCell   *l;
+        const CaseExpr *e = (const CaseExpr *) expr;
+        fprintf(fp,"CASE ");
+        foreach(l, e->args)
+        {
+            fprint_expr(fp, lfirst(l), rtable);
+            fprintf(fp," ");
+        }
+        fprintf(fp,"ELSE ");
+        fprint_expr(fp, e->defresult, rtable);
+        fprintf(fp," END");
+    }
+    else if (IsA(expr, CaseWhen))
+    {
+        const CaseWhen *e = (const CaseWhen *) expr;
+        fprintf(fp,"WHEN ");
+        fprint_expr(fp, e->expr, rtable);
+        fprintf(fp,"THEN ");
+        fprint_expr(fp, e->result, rtable);
+    }
+    else if (IsA(expr, Param))
+    {
+        fprintf(fp,"unsupported expr: Param");
+    }
+    else if (IsA(expr, SubPlan))
+    {
+        fprintf(fp,"unsupported expr: SubPlan");
+    }
+    else if (IsA(expr, AlternativeSubPlan))
+    {
+        fprintf(fp,"unsupported expr: AlternativeSubPlan");
+    }
+    else if (IsA(expr, CoerceViaIO))
+    {
+        fprintf(fp,"unsupported expr: CoerceViaIO");
+    }
+    else if (IsA(expr, CoerceToDomain))
+    {
+        fprintf(fp,"unsupported expr: CoerceToDomain");
+    }
+    else if (IsA(expr, CoerceToDomainValue))
+    {
+        fprintf(fp,"unsupported expr: CoerceToDomainValue");
+    }
+    else
+    {
+        fprintf(fp, "unknown expr %d", expr->type);
+    }
+}
+
+
+bool is_join_condition(const OpExpr *opclause)
+{
+    if (list_length(opclause->args) > 1)
+    {
+        const Node *left = get_leftop((const Expr *) opclause);
+        const Node *right = get_rightop((const Expr *) opclause);
+        return (IsA(left, Var) && IsA(right, Var));
+    }
+    return false;
+}
+
+
 /****************************************************************************
  *     ROUTINES TO COMPUTE SELECTIVITIES
  ****************************************************************************/
@@ -876,6 +1234,27 @@
                                         opclause->args,
                                         opclause->inputcollid,
                                         varRelid);
+
+            if(!is_join_condition(opclause))
+            {
+                if(ml_cardest_enabled) {
+                    if (query_no == 0) {
+                        read_from_fspn_estimate(ml_cardest_fname);
+                    }
+                    double new_sel = sel_ests[query_no];
+
+                    if (new_sel >= 0){
+                        s1 = new_sel;
+                    }
+                    query_no++;
+                }
+                if (print_single_tbl_queries) {
+                    FILE* f = fopen("predicates.txt", "a+");
+                    fprint_expr(f, clause, root->parse->rtable);
+                    fprintf(f,",%f\n", s1);
+                    fclose(f);
+                }
+            }
        }
 
        /*
Binary files postgresql-14.5/src/backend/optimizer/path/clausesel.o and postgresql-14.5-selectivity-injection/src/backend/optimizer/path/clausesel.o differ
diff -ruN postgresql-14.5/src/backend/optimizer/path/costsize.c postgresql-14.5-selectivity-injection/src/backend/optimizer/path/costsize.c
--- postgresql-14.5/src/backend/optimizer/path/costsize.c   2022-08-08 22:44:29.000000000 +0200
+++ postgresql-14.5-selectivity-injection/src/backend/optimizer/path/costsize.c 2023-10-17 13:06:23.808070826 +0200
@@ -98,9 +98,30 @@
 #include "utils/spccache.h"
 #include "utils/tuplesort.h"
 
+// END2END >>>>>
+#include "nodes/print.h"
+#include "catalog/pg_type.h"
+#include <unistd.h>
+#include <time.h>
+#include <stdlib.h>
+typedef char TYPCATEGORY;
+// <<<<< END2END
 
 #define LOG2(x)  (log(x) / 0.693147180559945)
 
+// END2END >>>>>
+int         query_no = 0;
+int         join_est_no = 0;
+bool        ml_cardest_enabled = false;
+bool        ml_joinest_enabled = false;
+bool        debug_card_est = false;
+bool        print_sub_queries = false;
+bool        print_single_tbl_queries = false;
+char        *ml_cardest_fname = NULL;
+char        *ml_joinest_fname = NULL;
+// <<<<< END2END
+
+
 /*
  * Append and MergeAppend nodes are less expensive than some other operations
  * which use cpu_tuple_cost; instead of adding a separate GUC, estimate the
@@ -190,6 +211,60 @@
 static double page_size(double tuples, int width);
 static double get_parallel_divisor(Path *path);
 
+// END2END >>>>>
+static void print_est_card(const char* func_name, double card);
+static void print_query_no(const char* func_name);
+static void read_from_fspn_estimate(const char* filename);
+static void read_from_fspn_join_estimate(const char* filename);
+static void fprint_expr(FILE* fp, const Node *expr, const List *rtable);
+
+
+
+static void
+print_query_no(const char* func_name)
+{
+    FILE *file = fopen("costsize.log", "a+");
+
+    time_t rawtime;
+    struct tm * timeinfo;
+    char time_buffer [128];
+
+    time (&rawtime);
+    timeinfo = localtime (&rawtime);
+    strftime (time_buffer,sizeof(time_buffer),"%Y/%m/%d %H:%M:%S",timeinfo);
+
+    fprintf(file, "%s: pid[%d] in [%s]: query num: %d\n", time_buffer, getpid(), func_name, query_no);
+    fclose(file);
+}
+
+static void
+print_est_card(const char* func_name, double card_est)
+{
+    FILE *file = fopen("costsize.log", "a+");
+
+    time_t rawtime;
+    struct tm * timeinfo;
+    char time_buffer [128];
+
+    time (&rawtime);
+    timeinfo = localtime (&rawtime);
+    strftime (time_buffer,sizeof(time_buffer),"%Y/%m/%d %H:%M:%S",timeinfo);
+
+    fprintf(file, "%s: pid[%d] in [%s]: %0.9f\n", time_buffer, getpid(), func_name, card_est);
+    fclose(file);
+}
+
+
+int
+StringCompare( const void* a, const void* b)
+{
+    char const **char_a = a;
+    char const **char_b = b;
+
+    return strcmp(*char_a, *char_b);
+}
+
+// <<<<< END2END
 
 /*
  * clamp_row_est
@@ -562,6 +637,7 @@
                   &indexSelectivity, &indexCorrelation,
                   &index_pages);
 
+
    /*
     * Save amcostestimate's results for possible use in bitmap scan planning.
     * We don't bother to save indexStartupCost or indexCorrelation, because a
@@ -4939,10 +5015,8 @@
                               JOIN_INNER,
                               NULL);
 
-   rel->rows = clamp_row_est(nrows);
-
    cost_qual_eval(&rel->baserestrictcost, rel->baserestrictinfo, root);
-
+    rel->rows = clamp_row_est(nrows);
    set_rel_width(root, rel);
 }
 
@@ -5018,6 +5092,7 @@
                                           inner_rel->rows,
                                           sjinfo,
                                           restrictlist);
+
 }
 
 /*
@@ -5061,6 +5136,11 @@
                                       inner_path->rows,
                                       sjinfo,
                                       restrict_clauses);
+
+// END2END >>>>>
+//    print_est_card(__FUNCTION__, nrows);
+// <<<<< END2END
+
    /* For safety, make sure result is not more than the base estimate */
    if (nrows > rel->rows)
        nrows = rel->rows;
@@ -5093,6 +5173,11 @@
    Selectivity jselec;
    Selectivity pselec;
    double      nrows;
+    List *full_restrict;
+
+    if (print_sub_queries) {
+        full_restrict = list_copy(restrictlist);
+    }
 
    /*
     * Compute joinclause selectivity.  Note that we are only considering
Binary files postgresql-14.5/src/backend/optimizer/path/costsize.o and postgresql-14.5-selectivity-injection/src/backend/optimizer/path/costsize.o differ
Binary files postgresql-14.5/src/backend/optimizer/path/equivclass.o and postgresql-14.5-selectivity-injection/src/backend/optimizer/path/equivclass.o differ
Binary files postgresql-14.5/src/backend/optimizer/path/indxpath.o and postgresql-14.5-selectivity-injection/src/backend/optimizer/path/indxpath.o differ
Binary files postgresql-14.5/src/backend/optimizer/path/joinpath.o and postgresql-14.5-selectivity-injection/src/backend/optimizer/path/joinpath.o differ
Binary files postgresql-14.5/src/backend/optimizer/path/joinrels.o and postgresql-14.5-selectivity-injection/src/backend/optimizer/path/joinrels.o differ
diff -ruN postgresql-14.5/src/backend/optimizer/path/objfiles.txt postgresql-14.5-selectivity-injection/src/backend/optimizer/path/objfiles.txt
--- postgresql-14.5/src/backend/optimizer/path/objfiles.txt 1970-01-01 01:00:00.000000000 +0100
+++ postgresql-14.5-selectivity-injection/src/backend/optimizer/path/objfiles.txt   2023-10-19 15:17:30.362254829 +0200
@@ -0,0 +1 @@
+src/backend/optimizer/path/allpaths.o src/backend/optimizer/path/clausesel.o src/backend/optimizer/path/costsize.o src/backend/optimizer/path/equivclass.o src/backend/optimizer/path/indxpath.o src/backend/optimizer/path/joinpath.o src/backend/optimizer/path/joinrels.o src/backend/optimizer/path/pathkeys.o src/backend/optimizer/path/tidpath.o
Binary files postgresql-14.5/src/backend/optimizer/path/pathkeys.o and postgresql-14.5-selectivity-injection/src/backend/optimizer/path/pathkeys.o differ
Binary files postgresql-14.5/src/backend/optimizer/path/tidpath.o and postgresql-14.5-selectivity-injection/src/backend/optimizer/path/tidpath.o differ